<?php
/**
 * ChannelExtendedStatisticsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChannelExtendedStatisticsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelExtendedStatisticsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'channelExtendedStatistics_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_initiated_paid_quantity' => 'int',
        'business_initiated_price' => 'float',
        'business_initiated_quantity' => 'int',
        'free_entry_point' => 'int',
        'free_quantity' => 'int',
        'free_tier' => 'int',
        'paid_quantity' => 'int',
        'period_date' => 'string',
        'quantity' => 'float',
        'total_price' => 'float',
        'user_initiated_paid_quantity' => 'int',
        'user_initiated_price' => 'float',
        'user_initiated_quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_initiated_paid_quantity' => null,
        'business_initiated_price' => null,
        'business_initiated_quantity' => null,
        'free_entry_point' => null,
        'free_quantity' => null,
        'free_tier' => null,
        'paid_quantity' => null,
        'period_date' => null,
        'quantity' => null,
        'total_price' => null,
        'user_initiated_paid_quantity' => null,
        'user_initiated_price' => null,
        'user_initiated_quantity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_initiated_paid_quantity' => false,
		'business_initiated_price' => false,
		'business_initiated_quantity' => false,
		'free_entry_point' => false,
		'free_quantity' => false,
		'free_tier' => false,
		'paid_quantity' => false,
		'period_date' => false,
		'quantity' => false,
		'total_price' => false,
		'user_initiated_paid_quantity' => false,
		'user_initiated_price' => false,
		'user_initiated_quantity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_initiated_paid_quantity' => 'business_initiated_paid_quantity',
        'business_initiated_price' => 'business_initiated_price',
        'business_initiated_quantity' => 'business_initiated_quantity',
        'free_entry_point' => 'free_entry_point',
        'free_quantity' => 'free_quantity',
        'free_tier' => 'free_tier',
        'paid_quantity' => 'paid_quantity',
        'period_date' => 'period_date',
        'quantity' => 'quantity',
        'total_price' => 'total_price',
        'user_initiated_paid_quantity' => 'user_initiated_paid_quantity',
        'user_initiated_price' => 'user_initiated_price',
        'user_initiated_quantity' => 'user_initiated_quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_initiated_paid_quantity' => 'setBusinessInitiatedPaidQuantity',
        'business_initiated_price' => 'setBusinessInitiatedPrice',
        'business_initiated_quantity' => 'setBusinessInitiatedQuantity',
        'free_entry_point' => 'setFreeEntryPoint',
        'free_quantity' => 'setFreeQuantity',
        'free_tier' => 'setFreeTier',
        'paid_quantity' => 'setPaidQuantity',
        'period_date' => 'setPeriodDate',
        'quantity' => 'setQuantity',
        'total_price' => 'setTotalPrice',
        'user_initiated_paid_quantity' => 'setUserInitiatedPaidQuantity',
        'user_initiated_price' => 'setUserInitiatedPrice',
        'user_initiated_quantity' => 'setUserInitiatedQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_initiated_paid_quantity' => 'getBusinessInitiatedPaidQuantity',
        'business_initiated_price' => 'getBusinessInitiatedPrice',
        'business_initiated_quantity' => 'getBusinessInitiatedQuantity',
        'free_entry_point' => 'getFreeEntryPoint',
        'free_quantity' => 'getFreeQuantity',
        'free_tier' => 'getFreeTier',
        'paid_quantity' => 'getPaidQuantity',
        'period_date' => 'getPeriodDate',
        'quantity' => 'getQuantity',
        'total_price' => 'getTotalPrice',
        'user_initiated_paid_quantity' => 'getUserInitiatedPaidQuantity',
        'user_initiated_price' => 'getUserInitiatedPrice',
        'user_initiated_quantity' => 'getUserInitiatedQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_initiated_paid_quantity', $data ?? [], null);
        $this->setIfExists('business_initiated_price', $data ?? [], null);
        $this->setIfExists('business_initiated_quantity', $data ?? [], null);
        $this->setIfExists('free_entry_point', $data ?? [], null);
        $this->setIfExists('free_quantity', $data ?? [], null);
        $this->setIfExists('free_tier', $data ?? [], null);
        $this->setIfExists('paid_quantity', $data ?? [], null);
        $this->setIfExists('period_date', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('user_initiated_paid_quantity', $data ?? [], null);
        $this->setIfExists('user_initiated_price', $data ?? [], null);
        $this->setIfExists('user_initiated_quantity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_initiated_paid_quantity
     *
     * @return int|null
     */
    public function getBusinessInitiatedPaidQuantity()
    {
        return $this->container['business_initiated_paid_quantity'];
    }

    /**
     * Sets business_initiated_paid_quantity
     *
     * @param int|null $business_initiated_paid_quantity business_initiated_paid_quantity
     *
     * @return self
     */
    public function setBusinessInitiatedPaidQuantity($business_initiated_paid_quantity)
    {
        if (is_null($business_initiated_paid_quantity)) {
            throw new \InvalidArgumentException('non-nullable business_initiated_paid_quantity cannot be null');
        }
        $this->container['business_initiated_paid_quantity'] = $business_initiated_paid_quantity;

        return $this;
    }

    /**
     * Gets business_initiated_price
     *
     * @return float|null
     */
    public function getBusinessInitiatedPrice()
    {
        return $this->container['business_initiated_price'];
    }

    /**
     * Sets business_initiated_price
     *
     * @param float|null $business_initiated_price business_initiated_price
     *
     * @return self
     */
    public function setBusinessInitiatedPrice($business_initiated_price)
    {
        if (is_null($business_initiated_price)) {
            throw new \InvalidArgumentException('non-nullable business_initiated_price cannot be null');
        }
        $this->container['business_initiated_price'] = $business_initiated_price;

        return $this;
    }

    /**
     * Gets business_initiated_quantity
     *
     * @return int|null
     */
    public function getBusinessInitiatedQuantity()
    {
        return $this->container['business_initiated_quantity'];
    }

    /**
     * Sets business_initiated_quantity
     *
     * @param int|null $business_initiated_quantity business_initiated_quantity
     *
     * @return self
     */
    public function setBusinessInitiatedQuantity($business_initiated_quantity)
    {
        if (is_null($business_initiated_quantity)) {
            throw new \InvalidArgumentException('non-nullable business_initiated_quantity cannot be null');
        }
        $this->container['business_initiated_quantity'] = $business_initiated_quantity;

        return $this;
    }

    /**
     * Gets free_entry_point
     *
     * @return int|null
     */
    public function getFreeEntryPoint()
    {
        return $this->container['free_entry_point'];
    }

    /**
     * Sets free_entry_point
     *
     * @param int|null $free_entry_point free_entry_point
     *
     * @return self
     */
    public function setFreeEntryPoint($free_entry_point)
    {
        if (is_null($free_entry_point)) {
            throw new \InvalidArgumentException('non-nullable free_entry_point cannot be null');
        }
        $this->container['free_entry_point'] = $free_entry_point;

        return $this;
    }

    /**
     * Gets free_quantity
     *
     * @return int|null
     */
    public function getFreeQuantity()
    {
        return $this->container['free_quantity'];
    }

    /**
     * Sets free_quantity
     *
     * @param int|null $free_quantity free_quantity
     *
     * @return self
     */
    public function setFreeQuantity($free_quantity)
    {
        if (is_null($free_quantity)) {
            throw new \InvalidArgumentException('non-nullable free_quantity cannot be null');
        }
        $this->container['free_quantity'] = $free_quantity;

        return $this;
    }

    /**
     * Gets free_tier
     *
     * @return int|null
     */
    public function getFreeTier()
    {
        return $this->container['free_tier'];
    }

    /**
     * Sets free_tier
     *
     * @param int|null $free_tier free_tier
     *
     * @return self
     */
    public function setFreeTier($free_tier)
    {
        if (is_null($free_tier)) {
            throw new \InvalidArgumentException('non-nullable free_tier cannot be null');
        }
        $this->container['free_tier'] = $free_tier;

        return $this;
    }

    /**
     * Gets paid_quantity
     *
     * @return int|null
     */
    public function getPaidQuantity()
    {
        return $this->container['paid_quantity'];
    }

    /**
     * Sets paid_quantity
     *
     * @param int|null $paid_quantity paid_quantity
     *
     * @return self
     */
    public function setPaidQuantity($paid_quantity)
    {
        if (is_null($paid_quantity)) {
            throw new \InvalidArgumentException('non-nullable paid_quantity cannot be null');
        }
        $this->container['paid_quantity'] = $paid_quantity;

        return $this;
    }

    /**
     * Gets period_date
     *
     * @return string|null
     */
    public function getPeriodDate()
    {
        return $this->container['period_date'];
    }

    /**
     * Sets period_date
     *
     * @param string|null $period_date period_date
     *
     * @return self
     */
    public function setPeriodDate($period_date)
    {
        if (is_null($period_date)) {
            throw new \InvalidArgumentException('non-nullable period_date cannot be null');
        }
        $this->container['period_date'] = $period_date;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price total_price
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets user_initiated_paid_quantity
     *
     * @return int|null
     */
    public function getUserInitiatedPaidQuantity()
    {
        return $this->container['user_initiated_paid_quantity'];
    }

    /**
     * Sets user_initiated_paid_quantity
     *
     * @param int|null $user_initiated_paid_quantity user_initiated_paid_quantity
     *
     * @return self
     */
    public function setUserInitiatedPaidQuantity($user_initiated_paid_quantity)
    {
        if (is_null($user_initiated_paid_quantity)) {
            throw new \InvalidArgumentException('non-nullable user_initiated_paid_quantity cannot be null');
        }
        $this->container['user_initiated_paid_quantity'] = $user_initiated_paid_quantity;

        return $this;
    }

    /**
     * Gets user_initiated_price
     *
     * @return float|null
     */
    public function getUserInitiatedPrice()
    {
        return $this->container['user_initiated_price'];
    }

    /**
     * Sets user_initiated_price
     *
     * @param float|null $user_initiated_price user_initiated_price
     *
     * @return self
     */
    public function setUserInitiatedPrice($user_initiated_price)
    {
        if (is_null($user_initiated_price)) {
            throw new \InvalidArgumentException('non-nullable user_initiated_price cannot be null');
        }
        $this->container['user_initiated_price'] = $user_initiated_price;

        return $this;
    }

    /**
     * Gets user_initiated_quantity
     *
     * @return int|null
     */
    public function getUserInitiatedQuantity()
    {
        return $this->container['user_initiated_quantity'];
    }

    /**
     * Sets user_initiated_quantity
     *
     * @param int|null $user_initiated_quantity user_initiated_quantity
     *
     * @return self
     */
    public function setUserInitiatedQuantity($user_initiated_quantity)
    {
        if (is_null($user_initiated_quantity)) {
            throw new \InvalidArgumentException('non-nullable user_initiated_quantity cannot be null');
        }
        $this->container['user_initiated_quantity'] = $user_initiated_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


