/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaId from '../model/MediaId';
import UploadMedia from '../model/UploadMedia';

/**
* Media service.
* @module api/MediaApi
* @version 2.39.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Upload media & get mediaId
     * Upload media and get mediaId. Uploaded media can be sent in template
     * @param {module:model/UploadMedia} uploadMedia 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MediaId} and HTTP response
     */
    uploadMediaWithHttpInfo(uploadMedia) {
      let postBody = uploadMedia;
      // verify the required parameter 'uploadMedia' is set
      if (uploadMedia === undefined || uploadMedia === null) {
        throw new Error("Missing the required parameter 'uploadMedia' when calling uploadMedia");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = MediaId;
      return this.apiClient.callApi(
        '/uploadMedia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload media & get mediaId
     * Upload media and get mediaId. Uploaded media can be sent in template
     * @param {module:model/UploadMedia} uploadMedia 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MediaId}
     */
    uploadMedia(uploadMedia) {
      return this.uploadMediaWithHttpInfo(uploadMedia)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
