/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMe401Response from '../model/GetMe401Response';
import GetMessages from '../model/GetMessages';
import ReadMessageRequest from '../model/ReadMessageRequest';
import SendContactRequest from '../model/SendContactRequest';
import SendFileRequest from '../model/SendFileRequest';
import SendListRequest from '../model/SendListRequest';
import SendLocationRequest from '../model/SendLocationRequest';
import SendMessageRequest from '../model/SendMessageRequest';
import SendMessageStatus from '../model/SendMessageStatus';
import SetMe from '../model/SetMe';

/**
* Messaging service.
* @module api/MessagingApi
* @version 2.39.0
*/
export default class MessagingApi {

    /**
    * Constructs a new MessagingApi. 
    * @alias module:api/MessagingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get messages list
     * 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [last] Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored.
     * @param {Number} [lastMessageNumber] The lastMessageNumber parameter from the last response. Example: 100
     * @param {Number} [firstMessageNumber] The firstMessageNumber parameter from the last response. Example: 1
     * @param {Number} [limit] Sets length of the message list. Default 100. With value 0 returns all messages.
     * @param {String} [chatId] Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us
     * @param {Number} [minTime] Filter messages received after specified time. Example: 1665396610
     * @param {Number} [maxTime] Filter messages received before specified time. Example: 1665396610
     * @param {String} [msgId] Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetMessages} and HTTP response
     */
    messagesListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'last': opts['last'],
        'lastMessageNumber': opts['lastMessageNumber'],
        'firstMessageNumber': opts['firstMessageNumber'],
        'limit': opts['limit'],
        'chatId': opts['chatId'],
        'min_time': opts['minTime'],
        'max_time': opts['maxTime'],
        'msgId': opts['msgId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMessages;
      return this.apiClient.callApi(
        '/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get messages list
     * 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.last Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored.
     * @param {Number} opts.lastMessageNumber The lastMessageNumber parameter from the last response. Example: 100
     * @param {Number} opts.firstMessageNumber The firstMessageNumber parameter from the last response. Example: 1
     * @param {Number} opts.limit Sets length of the message list. Default 100. With value 0 returns all messages.
     * @param {String} opts.chatId Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us
     * @param {Number} opts.minTime Filter messages received after specified time. Example: 1665396610
     * @param {Number} opts.maxTime Filter messages received before specified time. Example: 1665396610
     * @param {String} opts.msgId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetMessages}
     */
    messagesList(opts) {
      return this.messagesListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark message as read
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadMessageRequest} [readMessageRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetMe} and HTTP response
     */
    readMessageWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['readMessageRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SetMe;
      return this.apiClient.callApi(
        '/readMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark message as read
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReadMessageRequest} opts.readMessageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetMe}
     */
    readMessage(opts) {
      return this.readMessageWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a Contact
     * Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendContactRequest} sendContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMessageStatus} and HTTP response
     */
    sendContactWithHttpInfo(sendContactRequest) {
      let postBody = sendContactRequest;
      // verify the required parameter 'sendContactRequest' is set
      if (sendContactRequest === undefined || sendContactRequest === null) {
        throw new Error("Missing the required parameter 'sendContactRequest' when calling sendContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageStatus;
      return this.apiClient.callApi(
        '/sendContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a Contact
     * Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendContactRequest} sendContactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMessageStatus}
     */
    sendContact(sendContactRequest) {
      return this.sendContactWithHttpInfo(sendContactRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a File
     * Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendFileRequest} sendFileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMessageStatus} and HTTP response
     */
    sendFileWithHttpInfo(sendFileRequest) {
      let postBody = sendFileRequest;
      // verify the required parameter 'sendFileRequest' is set
      if (sendFileRequest === undefined || sendFileRequest === null) {
        throw new Error("Missing the required parameter 'sendFileRequest' when calling sendFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageStatus;
      return this.apiClient.callApi(
        '/sendFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a File
     * Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendFileRequest} sendFileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMessageStatus}
     */
    sendFile(sendFileRequest) {
      return this.sendFileWithHttpInfo(sendFileRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send List Message
     * Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendListRequest} sendListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMessageStatus} and HTTP response
     */
    sendListWithHttpInfo(sendListRequest) {
      let postBody = sendListRequest;
      // verify the required parameter 'sendListRequest' is set
      if (sendListRequest === undefined || sendListRequest === null) {
        throw new Error("Missing the required parameter 'sendListRequest' when calling sendList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageStatus;
      return this.apiClient.callApi(
        '/sendList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send List Message
     * Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendListRequest} sendListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMessageStatus}
     */
    sendList(sendListRequest) {
      return this.sendListWithHttpInfo(sendListRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a Location
     * Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendLocationRequest} sendLocationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMessageStatus} and HTTP response
     */
    sendLocationWithHttpInfo(sendLocationRequest) {
      let postBody = sendLocationRequest;
      // verify the required parameter 'sendLocationRequest' is set
      if (sendLocationRequest === undefined || sendLocationRequest === null) {
        throw new Error("Missing the required parameter 'sendLocationRequest' when calling sendLocation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageStatus;
      return this.apiClient.callApi(
        '/sendLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a Location
     * Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendLocationRequest} sendLocationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMessageStatus}
     */
    sendLocation(sendLocationRequest) {
      return this.sendLocationWithHttpInfo(sendLocationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a Message
     * Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendMessageRequest} sendMessageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendMessageStatus} and HTTP response
     */
    sendMessageWithHttpInfo(sendMessageRequest) {
      let postBody = sendMessageRequest;
      // verify the required parameter 'sendMessageRequest' is set
      if (sendMessageRequest === undefined || sendMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendMessageRequest' when calling sendMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageStatus;
      return this.apiClient.callApi(
        '/sendMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send a Message
     * Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param {module:model/SendMessageRequest} sendMessageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendMessageStatus}
     */
    sendMessage(sendMessageRequest) {
      return this.sendMessageWithHttpInfo(sendMessageRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
