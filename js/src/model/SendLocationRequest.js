/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatIdProp from './ChatIdProp';
import PhoneProp from './PhoneProp';

/**
 * The SendLocationRequest model module.
 * @module model/SendLocationRequest
 * @version 2.39.0
 */
class SendLocationRequest {
    /**
     * Constructs a new <code>SendLocationRequest</code>.
     * @alias module:model/SendLocationRequest
     * @implements module:model/ChatIdProp
     * @implements module:model/PhoneProp
     * @param lat {String} Latitude of the location. Example: 45.018337
     * @param lng {String} Longitude of the location. Example: -73.968285
     */
    constructor(lat, lng) { 
        ChatIdProp.initialize(this);PhoneProp.initialize(this);
        SendLocationRequest.initialize(this, lat, lng);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lat, lng) { 
        obj['lat'] = lat;
        obj['lng'] = lng;
    }

    /**
     * Constructs a <code>SendLocationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendLocationRequest} obj Optional instance to populate.
     * @return {module:model/SendLocationRequest} The populated <code>SendLocationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendLocationRequest();
            ChatIdProp.constructFromObject(data, obj);
            PhoneProp.constructFromObject(data, obj);

            if (data.hasOwnProperty('chatId')) {
                obj['chatId'] = ApiClient.convertToType(data['chatId'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'String');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendLocationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendLocationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendLocationRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chatId'] && !(typeof data['chatId'] === 'string' || data['chatId'] instanceof String)) {
            throw new Error("Expected the field `chatId` to be a primitive type in the JSON string but got " + data['chatId']);
        }
        // ensure the json data is a string
        if (data['lat'] && !(typeof data['lat'] === 'string' || data['lat'] instanceof String)) {
            throw new Error("Expected the field `lat` to be a primitive type in the JSON string but got " + data['lat']);
        }
        // ensure the json data is a string
        if (data['lng'] && !(typeof data['lng'] === 'string' || data['lng'] instanceof String)) {
            throw new Error("Expected the field `lng` to be a primitive type in the JSON string but got " + data['lng']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

SendLocationRequest.RequiredProperties = ["lat", "lng"];

/**
 * **Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter.
 * @member {String} chatId
 */
SendLocationRequest.prototype['chatId'] = undefined;

/**
 * **Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369.
 * @member {Number} phone
 */
SendLocationRequest.prototype['phone'] = undefined;

/**
 * Latitude of the location. Example: 45.018337
 * @member {String} lat
 */
SendLocationRequest.prototype['lat'] = undefined;

/**
 * Longitude of the location. Example: -73.968285
 * @member {String} lng
 */
SendLocationRequest.prototype['lng'] = undefined;

/**
 * Address of the location. Only displayed if name is present. Example: 9766 Valley View St., New York, NY 10024
 * @member {String} address
 */
SendLocationRequest.prototype['address'] = undefined;

/**
 * Name of the location. Example: Facebook HQ
 * @member {String} name
 */
SendLocationRequest.prototype['name'] = undefined;


// Implement ChatIdProp interface:
/**
 * **Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter.
 * @member {String} chatId
 */
ChatIdProp.prototype['chatId'] = undefined;
// Implement PhoneProp interface:
/**
 * **Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369.
 * @member {Number} phone
 */
PhoneProp.prototype['phone'] = undefined;




export default SendLocationRequest;

